{"version":3,"sources":["assets sync /^/.*/.jpg$","assets/bread.jpg","assets/bun.jpg","assets/cherry.jpg","assets/cookies.jpg","assets/cupcakes.jpg","assets/donut.jpg","assets/dough.jpg","assets/eggs.jpg","assets/flour.jpg","assets/hotdog.jpg","assets/ketchup.jpg","assets/layercake.jpg","assets/lettuce.jpg","assets/meat.jpg","assets/milk.jpg","assets/mustard.jpg","assets/sausage.jpg","assets/sprinkle.jpg","assets/sprinkledcupcakes.jpg","assets/sugar.jpg","assets/tomato.jpg","NavBar.js","MergeResource.js","GroupBasic.js","GroupLevel1.js","GroupOverview.js","GroupDeko.js","App.js","serviceWorker.js","index.js"],"names":["map","./bread.jpg","./bun.jpg","./cherry.jpg","./cookies.jpg","./cupcakes.jpg","./donut.jpg","./dough.jpg","./eggs.jpg","./flour.jpg","./hotdog.jpg","./ketchup.jpg","./layercake.jpg","./lettuce.jpg","./meat.jpg","./milk.jpg","./mustard.jpg","./sausage.jpg","./sprinkle.jpg","./sprinkledcupcakes.jpg","./sugar.jpg","./tomato.jpg","webpackContext","req","id","webpackContextResolve","__webpack_require__","e","Error","code","keys","Object","resolve","module","exports","p","NavBar","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","balanceKey","getBalance","balance","drizzleState","contracts","resourceName","balanceOf","value","toggle","bind","assertThisInitialized","isOpen","_this$props","drizzle","methods","cacheCall","accounts","setState","react_default","a","createElement","reactstrap_es","color","dark","expand","href","onClick","navbar","className","Link","to","React","Component","MergeResource","dropdownOpen","stackId","mintableKey","symbolKey","nameKey","factoryLevelKey","getUpgradeCostKey","timeUntilCollectableKey","timeUntilCollectExpiresKey","timeToProduceKey","amountCollectionLevelKey","amountGameCurrencyAvailableKey","gameCurrencyProductionAmountOnCollectKey","tooltipOpen","dependencies","amounts","availabilityKeys","addElement","resourceToName","amount","contract_from","contract_to","cacheSend","address","from","startAcquiring","_this$props2","gas","mintToken","_this$props3","getTxStatus","_this$props$drizzleSt","transactions","txHash","transactionStack","concat","status","isTxPending","_this$props$drizzleSt2","isMintable","contract","timeUntilCollectable","timeCollectableExpires","timeUntilCollectionExpires","collectExpires","Date","date","collectibleDate","isProduceable","i","length","dependentContractName","contractName","allowanceKey","allowance","isInProduction","getTimeToProduce","getTimeToCollectBasedOnLevel","getAmountToCollect","getCollectionAmountBasedOnLevel","amountIngredientsTransferred","ingredientName","isUpgradeable","getFactoryLevel","gameCurrencyBalance","getUpgradeCost","upgradeToken","_this$props4","level","factoryLevel","cost","getLevelUpgradeCost","getGameCurrencyAmount","gameCurrencyAmount","gameCurrencyProductionAmountOnCollect","enoughIngredients","hasResource","dependentContractBalanceKey","toggleToolip","_this2","_this$props5","drizzleStatus","initialized","getTokenDependency","then","res","objectKey","index","indexOfDep","indexOf","objDependency","push","_this3","symbol","name","dependentRows","_loop","disabled","key","tokenDependencyArr","caret","size","index_es","icon","faExchangeAlt","xs","top","width","max-height","src","require","toLowerCase","replace","alt","join","toLocaleString","title","faIndustry","faTruckPickup","faAngleDoubleUp","GroupBasic","src_MergeResource","GroupLevel1","self","GroupDeko","App","BrowserRouter","basename","drizzle_react","Consumer","drizzleContext","src_NavBar","Route","path","exact","render","src_GroupBasic","assign","src_GroupLevel1","src_GroupDeko","GroupOverview","Boolean","window","location","hostname","match","options","Flour","Eggs","Milk","Dough","Sugar","Cookies","Donut","Layercake","Sprinkle","Sprinkledcupcakes","syncAlways","polls","blocks","drizzleStore","generateStore","Drizzle","ReactDOM","Provider","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6pj/EAAA,IAAAA,EAAA,CACAC,cAAA,IACAC,YAAA,IACAC,eAAA,IACAC,gBAAA,IACAC,iBAAA,IACAC,cAAA,IACAC,cAAA,IACAC,aAAA,IACAC,cAAA,IACAC,eAAA,IACAC,gBAAA,IACAC,kBAAA,IACAC,gBAAA,IACAC,aAAA,IACAC,aAAA,IACAC,gBAAA,IACAC,gBAAA,IACAC,iBAAA,IACAC,0BAAA,IACAC,cAAA,IACAC,eAAA,KAIA,SAAAC,EAAAC,GACA,IAAAC,EAAAC,EAAAF,GACA,OAAAG,EAAAF,GAEA,SAAAC,EAAAF,GACA,IAAAC,EAAAxB,EAAAuB,GACA,KAAAC,EAAA,IACA,IAAAG,EAAA,IAAAC,MAAA,uBAAAL,EAAA,KAEA,MADAI,EAAAE,KAAA,mBACAF,EAEA,OAAAH,EAEAF,EAAAQ,KAAA,WACA,OAAAC,OAAAD,KAAA9B,IAEAsB,EAAAU,QAAAP,EACAQ,EAAAC,QAAAZ,EACAA,EAAAE,GAAA,yBC3CAS,EAAAC,QAAiBR,EAAAS,EAAuB,uDCAxCF,EAAAC,QAAiBR,EAAAS,EAAuB,qDCAxCF,EAAAC,QAAiBR,EAAAS,EAAuB,wDCAxCF,EAAAC,QAAiBR,EAAAS,EAAuB,yDCAxCF,EAAAC,QAAiBR,EAAAS,EAAuB,0DCAxCF,EAAAC,QAAiBR,EAAAS,EAAuB,uDCAxCF,EAAAC,QAAiBR,EAAAS,EAAuB,uDCAxCF,EAAAC,QAAiBR,EAAAS,EAAuB,sDCAxCF,EAAAC,QAAiBR,EAAAS,EAAuB,uDCAxCF,EAAAC,QAAiBR,EAAAS,EAAuB,wDCAxCF,EAAAC,QAAiBR,EAAAS,EAAuB,yDCAxCF,EAAAC,QAAiBR,EAAAS,EAAuB,2DCAxCF,EAAAC,QAAiBR,EAAAS,EAAuB,yDCAxCF,EAAAC,QAAiBR,EAAAS,EAAuB,sDCAxCF,EAAAC,QAAiBR,EAAAS,EAAuB,sDCAxCF,EAAAC,QAAiBR,EAAAS,EAAuB,yDCAxCF,EAAAC,QAAiBR,EAAAS,EAAuB,yDCAxCF,EAAAC,QAAiBR,EAAAS,EAAuB,0DCAxCF,EAAAC,QAAiBR,EAAAS,EAAuB,mECAxCF,EAAAC,QAAiBR,EAAAS,EAAuB,uDCAxCF,EAAAC,QAAiBR,EAAAS,EAAuB,0RCkFzBC,cAjEX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAP,OAAAQ,EAAA,EAAAR,CAAAS,KAAAJ,IACjBE,EAAAP,OAAAU,EAAA,EAAAV,CAAAS,KAAAT,OAAAW,EAAA,EAAAX,CAAAK,GAAAO,KAAAH,KAAMH,KALVO,MAAQ,CACNC,WAAY,MAGOP,EAuBnBQ,WAAa,WACX,IACIC,EADaT,EAAKD,MAAMW,aAAaC,UAAUX,EAAKD,MAAMa,cACvCC,UAAUb,EAAKM,MAAMC,YAC5C,OAAIE,GAAWA,EAAQK,MACdL,EAAQK,MAEV,GA1BPd,EAAKe,OAASf,EAAKe,OAAOC,KAAZvB,OAAAwB,EAAA,EAAAxB,QAAAwB,EAAA,EAAAxB,CAAAO,KACdA,EAAKM,MAAQ,CACXY,QAAQ,GALOlB,mFASC,IAAAmB,EAKdjB,KAAKH,MAHPqB,EAFgBD,EAEhBC,QACAV,EAHgBS,EAGhBT,aACAE,EAJgBO,EAIhBP,aAGIL,EADWa,EAAQT,UAAUC,GACPS,QAAT,UAA8BC,UAAUZ,EAAaa,SAAS,IACjFrB,KAAKsB,SAAS,CACZjB,gDAeFL,KAAKsB,SAAS,CACZN,QAAShB,KAAKI,MAAMY,0CAIpB,OACEO,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQC,MAAM,OAAOC,MAAI,EAACC,OAAO,MAC/BN,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAaI,KAAK,KAAlB,MAA0B9B,KAAKM,aAA/B,QACAiB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAeK,QAAS/B,KAAKa,SAC7BU,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAUV,OAAQhB,KAAKI,MAAMY,OAAQgB,QAAM,GACzCT,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKO,UAAU,UAAUD,QAAM,GAC7BT,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAMC,GAAG,IAAIF,UAAU,YAAvB,sBAEFV,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAMC,GAAG,cAAeF,UAAU,YAAlC,eAEFV,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAMC,GAAG,UAAWF,UAAU,YAA9B,iBAEFV,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAMC,GAAG,QAASF,UAAU,YAA5B,qBA7DCG,IAAMC,2BC+cZC,6MApcXlC,MAAQ,CACNmC,cAAc,EACdC,QAAS,KACTC,YAAa,KACbC,UAAW,KACXC,QAAS,KACTtC,WAAY,KACZuC,gBAAiB,KACjBC,kBAAmB,KACnBC,wBAAyB,KACzBC,2BAA4B,KAC5BC,iBAAkB,KAClBC,yBAA0B,KAC1BC,+BAAgC,KAChCC,yCAA0C,KAC1CC,aAAa,EACbC,aAAc,GACdC,QAAS,GACTC,iBAAkB,MAgGpBC,WAAa,SAACC,EAAgBC,GAAW,IAAAzC,EAKnCnB,EAAKD,MAHPqB,EAFqCD,EAErCC,QACAV,EAHqCS,EAGrCT,aACAE,EAJqCO,EAIrCP,aAEIiD,EAAgBzC,EAAQT,UAAUgD,GAClCG,EAAc1C,EAAQT,UAAUC,GAEhC8B,EAAUmB,EAAcxC,QAAd,QAAiC0C,UAAUD,EAAYE,QAASJ,EAAQ,CACtFK,KAAMvD,EAAaa,SAAS,KAE9BvB,EAAKwB,SAAS,CACZkB,eAIJwB,eAAiB,WAAM,IAAAC,EAKjBnE,EAAKD,MAHPqB,EAFmB+C,EAEnB/C,QACAV,EAHmByD,EAGnBzD,aACAE,EAJmBuD,EAInBvD,aAII8B,EAFWtB,EAAQT,UAAUC,GAEVS,QAAT,eAAmC0C,UAAU,CAC3DE,KAAMvD,EAAaa,SAAS,GAC5B6C,IAAK,MAEPpE,EAAKwB,SAAS,CACZkB,eAGJ2B,UAAY,WAAM,IAAAC,EAKZtE,EAAKD,MAHPqB,EAFckD,EAEdlD,QACAV,EAHc4D,EAGd5D,aACAE,EAJc0D,EAId1D,aAII8B,EAFWtB,EAAQT,UAAUC,GAEVS,QAAT,aAAiC0C,UAAU,CACzDE,KAAMvD,EAAaa,SAAS,KAE9BvB,EAAKwB,SAAS,CACZkB,eAIJ6B,YAAc,WAAM,IAAAC,EAKdxE,EAAKD,MAAMW,aAFb+D,EAHgBD,EAGhBC,aAKIC,EARYF,EAIhBG,iBAI8B3E,EAAKM,MAAMoC,SAG3C,OAAKgC,EAGL,uBAAAE,OAA8BH,EAAaC,GAAQG,QAH/B,QAMtBC,YAAc,WAAM,IAAAC,EAKd/E,EAAKD,MAAMW,aAFb+D,EAHgBM,EAGhBN,aAKIC,EARYK,EAIhBJ,iBAI8B3E,EAAKM,MAAMoC,SAE3C,QAAKgC,IAI+B,YAAhCD,EAAaC,GAAQG,aAAzB,MAKFG,WAAa,WACX,IAAMC,EAAWjF,EAAKD,MAAMW,aAAaC,UAAUX,EAAKD,MAAMa,cACxDsE,EAAuBD,EAASC,qBAAqBlF,EAAKM,MAAM0C,yBAChEmC,EAAyBF,EAASG,2BAA2BpF,EAAKM,MAAM2C,4BACxEoC,EAAiBF,EAAyB,IAAIG,KAAoC,IAA/BH,EAAuBrE,OAAgB,IAAIwE,KAEhGC,EAAO,IAAID,KACXE,EAAkBN,EAAuB,IAAII,KAAkC,IAA7BJ,EAAqBpE,OAAgB,IAAIwE,KAC/F,OAAOJ,GAAuD,IAA/BA,EAAqBpE,OAAe0E,GAAmBD,GAAQF,GAAkBE,KAGlHE,cAAgB,WAEd,IADA,IACSC,EAAI,EAAGA,EAAI1F,EAAKM,MAAMiD,aAAaoC,OAAQD,IAAK,CACvD,IAAIE,EAAwB5F,EAAKM,MAAMiD,aAAamC,GAAGG,aACnDC,EAAe9F,EAAKM,MAAMiD,aAAamC,GAAGI,aAE9C,KAD2B9F,EAAKD,MAAMW,aAAaC,UAAUiF,GAAuBG,UAAUD,IAA0G,EAAzF9F,EAAKD,MAAMW,aAAaC,UAAUiF,GAAuBG,UAAUD,GAAchF,OAAad,EAAKM,MAAMiD,aAAamC,GAAG9B,QAEtO,OAAO,EAKX,IAAMqB,EAAWjF,EAAKD,MAAMW,aAAaC,UAAUX,EAAKD,MAAMa,cACxDsE,EAAuBD,EAASC,qBAAqBlF,EAAKM,MAAM0C,yBAChEmC,EAAyBF,EAASG,2BAA2BpF,EAAKM,MAAM2C,4BACxEoC,EAAiBF,EAAyB,IAAIG,KAAoC,IAA/BH,EAAuBrE,OAAgB,IAAIwE,KAEhGC,EAAO,IAAID,KACf,OAAOJ,IAAwD,IAA/BA,EAAqBpE,OAAeuE,EAAiBE,MAGvFS,eAAiB,WACf,IACMd,EADWlF,EAAKD,MAAMW,aAAaC,UAAUX,EAAKD,MAAMa,cACxBsE,qBAAqBlF,EAAKM,MAAM0C,yBAElEuC,EAAO,IAAID,KACXE,EAAkBN,EAAuB,IAAII,KAAkC,IAA7BJ,EAAqBpE,OAAgB,IAAIwE,KAC/F,OAAOJ,GAAuD,IAA/BA,EAAqBpE,OAAe0E,EAAkBD,KAEvFU,iBAAmB,WACjB,IACMf,EADWlF,EAAKD,MAAMW,aAAaC,UAAUX,EAAKD,MAAMa,cACxBsF,6BAA6BlG,EAAKM,MAAM4C,kBAE9E,OAAOgC,GAAwBA,EAAqBpE,SAEtDqF,mBAAqB,WACnB,IACMjB,EADWlF,EAAKD,MAAMW,aAAaC,UAAUX,EAAKD,MAAMa,cACxBwF,gCAAgCpG,EAAKM,MAAM6C,0BAEjF,OAAO+B,GAAwBA,EAAqBpE,SAGtDN,WAAa,WACX,IACIC,EADaT,EAAKD,MAAMW,aAAaC,UAAUX,EAAKD,MAAMa,cACvCC,UAAUb,EAAKM,MAAMC,YAC5C,OAAIE,GAAWA,EAAQK,MACdL,EAAQK,MAEV,KAETuF,6BAA+B,SAACC,GAE9B,IAAK,IAAIZ,EAAI,EAAGA,EAAI1F,EAAKM,MAAMiD,aAAaoC,OAAQD,IAClD,GAAIY,IAAmBtG,EAAKM,MAAMiD,aAAamC,GAAGG,aAAc,CAC9D,IAAID,EAAwB5F,EAAKM,MAAMiD,aAAamC,GAAGG,aACnDC,EAAe9F,EAAKM,MAAMiD,aAAamC,GAAGI,aAC9C,OAAO9F,EAAKD,MAAMW,aAAaC,UAAUiF,GAAuBG,UAAUD,IAA0G,EAAzF9F,EAAKD,MAAMW,aAAaC,UAAUiF,GAAuBG,UAAUD,GAAchF,UAKlLyF,cAAgB,WACd,GAAGvG,EAAKwG,kBAAoB,EAAG,CAC7B,IAAMC,EAAsBzG,EAAKD,MAAMW,aAAaC,UAAxB,aAAkDE,UAAUb,EAAKM,MAAM8C,gCACnG,GAAGqD,GAAkD,EAA1BA,EAAoB3F,OAAWd,EAAK0G,iBAC7D,OAAO,EAGX,OAAO,KAGTC,aAAe,WAAM,IAAAC,EAKf5G,EAAKD,MAHPqB,EAFiBwF,EAEjBxF,QACAV,EAHiBkG,EAGjBlG,aACAE,EAJiBgG,EAIjBhG,aAII8B,EAFWtB,EAAQT,UAAUC,GAEVS,QAAT,QAA4B0C,UAAU,CACpDE,KAAMvD,EAAaa,SAAS,GAC5B6C,IAAK,MAEPpE,EAAKwB,SAAS,CACZkB,eAIJ8D,gBAAkB,WAEhB,IACIK,EADa7G,EAAKD,MAAMW,aAAaC,UAAUX,EAAKD,MAAMa,cACzCkG,aAAa9G,EAAKM,MAAMwC,iBAC7C,OAAI+D,GAASA,EAAM/F,MACV+F,EAAM/F,MAER,KAGT4F,eAAiB,WACf,IACIK,EADa/G,EAAKD,MAAMW,aAAaC,UAAUX,EAAKD,MAAMa,cAC1CoG,oBAAoBhH,EAAKM,MAAMyC,mBACnD,OAAIgE,GAAQA,EAAKjG,MACRiG,EAAKjG,MAEP,KAGTmG,sBAAwB,WACtB,IACIC,EADalH,EAAKD,MAAMW,aAAaC,UAAUX,EAAKD,MAAMa,cAC5BuG,sCAAsCnH,EAAKM,MAAM+C,0CACnF,OAAI6D,GAAsBA,EAAmBpG,MACpCoG,EAAmBpG,MAErB,KAITsG,kBAAoB,WAElB,IADA,IAAIC,GAAc,EACT3B,EAAI,EAAGA,EAAI1F,EAAKM,MAAMiD,aAAaoC,OAAQD,IAAK,CACvD,IAAIE,EAAwB5F,EAAKM,MAAMiD,aAAamC,GAAGG,aACnDyB,EAA8BtH,EAAKM,MAAMiD,aAAamC,GAAGnF,WACzDP,EAAKD,MAAMW,aAAaC,UAAUiF,GAAuB/E,UAAUyG,IACuC,EAAxGtH,EAAKD,MAAMW,aAAaC,UAAUiF,GAAuB/E,UAAUyG,GAA6BxG,OAAad,EAAKM,MAAMiD,aAAamC,GAAG9B,SAC1IyD,GAAc,GAKpB,QAAIA,MAGArH,EAAKyF,oBAGLzF,EAAKgF,iBAGLhF,EAAKgG,kBAGLhG,EAAKQ,aAAe,QAS1BO,OAAS,WACPf,EAAKwB,SAAS,CACZiB,cAAezC,EAAKM,MAAMmC,kBAI9B8E,aAAe,WACbvH,EAAKwB,SAAS,CACZ8B,aAActD,EAAKM,MAAMgD,kGA3VT,IAAAkE,EAAAtH,KAAAuH,EAKdvH,KAAKH,MAHPqB,EAFgBqG,EAEhBrG,QACAV,EAHgB+G,EAGhB/G,aACAE,EAJgB6G,EAIhB7G,aAGF,GAAIF,EAAagH,cAAcC,YAAa,CAC1C,IAAM1C,EAAW7D,EAAQT,UAAUC,GACnCqE,EAAS5D,QAAQuG,qBAAqBvH,OAAOwH,KAAK,SAAAC,GAChD,IAAIvE,EAAe,GACnB9D,OAAOD,KAAK4B,EAAQT,WAAWjD,IAAI,SAAUqK,EAAWC,GACtD,IAAIC,EAAaH,EAAI,GAAGI,QAAQ9G,EAAQT,UAAUoH,GAAW/D,SAC7D,IAAoB,IAAhBiE,EAAmB,CACrB,IAAIE,EAAgB,CAClBtC,aAAckC,EACdnE,OAAQkE,EAAI,GAAGG,GACf1H,WAAYa,EAAQT,UAAUoH,GAAW1G,QAA7B,UAAkDC,UAAUZ,EAAaa,SAAS,IAC9FuE,aAAc1E,EAAQT,UAAUoH,GAAW1G,QAA7B,UAAkDC,UAAUZ,EAAaa,SAAS,GAAI0D,EAASjB,UAE/GT,EAAa6E,KAAKD,GAEpB,OAAO,OAETX,EAAKhG,SAAS,CACZ+B,mBAIJ,IAAMH,EAAiChC,EAAQT,UAAR,aAAkCU,QAAlC,UAAuDC,UAAUZ,EAAaa,SAAS,IAC9HrB,KAAKsB,SAAS,CAAC4B,mCAKf,IAAMT,EAAcsC,EAAS5D,QAAT,iBAAqCC,YACzDpB,KAAKsB,SAAS,CACZmB,gBAIF,IAAMU,EAA2C4B,EAAS5D,QAAT,sCAA0DC,YAC3GpB,KAAKsB,SAAS,CACZ6B,6CAGF,IAAML,EAA0BiC,EAAS5D,QAAT,qBAAyCC,YACzEpB,KAAKsB,SAAS,CACZwB,4BAGF,IAAMC,EAA6BgC,EAAS5D,QAAT,2BAA+CC,YAClFpB,KAAKsB,SAAS,CACZyB,+BAGF,IAAMC,EAAmB+B,EAAS5D,QAAT,6BAAiDC,YAC1EpB,KAAKsB,SAAS,CACZ0B,qBAEF,IAAMC,EAA2B8B,EAAS5D,QAAT,gCAAoDC,YACrFpB,KAAKsB,SAAS,CACZ2B,6BAGF,IAAMP,EAAYqC,EAAS5D,QAAT,OAA2BC,YAC7CpB,KAAKsB,SAAS,CACZoB,cAIF,IAAMC,EAAUoC,EAAS5D,QAAT,KAAyBC,YACzCpB,KAAKsB,SAAS,CACZqB,YAGF,IAAMtC,EAAa0E,EAAS5D,QAAT,UAA8BC,UAAUZ,EAAaa,SAAS,IACjFrB,KAAKsB,SAAS,CACZjB,eAGF,IAAMuC,EAAkBmC,EAAS5D,QAAT,aAAiCC,UAAUZ,EAAaa,SAAS,IACzFrB,KAAKsB,SAAS,CACZsB,oBAGF,IAAMC,EAAoBkC,EAAS5D,QAAT,oBAAwCC,YAClEpB,KAAKsB,SAAS,CACZuB,wDAoRF,IAZK,IAAAsF,EAAAnI,KACC+E,EAAW/E,KAAKH,MAAMW,aAAaC,UAAUT,KAAKH,MAAMa,cAExDsE,EAAuBD,EAASC,qBAAqBhF,KAAKI,MAAM0C,yBAChEwC,EAAkBN,EAAuB,IAAII,KAAkC,IAA7BJ,EAAqBpE,OAAgB,IAAIwE,KAE3FH,EAAyBF,EAASG,2BAA2BlF,KAAKI,MAAM2C,4BACxEoC,EAAiBF,EAAyB,IAAIG,KAAoC,IAA/BH,EAAuBrE,OAAgB,IAAIwE,KAC9FgD,EAASrD,EAASqD,OAAOpI,KAAKI,MAAMsC,WACpChC,EAAeqE,EAASsD,KAAKrI,KAAKI,MAAMuC,SAE1C2F,EAAgB,GAXfC,EAAA,SAYI/C,GACHE,EAAwByC,EAAK/H,MAAMiD,aAAamC,GAAGG,aACnDyB,EAA8Be,EAAK/H,MAAMiD,aAAamC,GAAGnF,WAE7DiI,EAAcJ,KAAK3G,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAcO,UAAYkG,EAAKhC,6BAA6BT,IAA0ByC,EAAK/H,MAAMiD,aAAamC,GAAG9B,OAAU,eAAiB,GAAI8E,SAAWL,EAAKtI,MAAMW,aAAaC,UAAUiF,GAAuB/E,UAAUyG,IAAsI,EAAtGe,EAAKtI,MAAMW,aAAaC,UAAUiF,GAAuB/E,UAAUyG,GAA6BxG,MAAUuH,EAAK/H,MAAMiD,aAAamC,GAAG9B,QAAWyE,EAAK5C,iBAAmB4C,EAAKrD,aAAc2D,IAAKjD,EAAGzD,QAAS,kBAAMoG,EAAK3E,WAAW2E,EAAK/H,MAAMiD,aAAamC,GAAGG,aAAcwC,EAAK/H,MAAMiD,aAAamC,GAAG9B,UAApiB,YAAujByE,EAAK/H,MAAMiD,aAAamC,GAAG9B,OAAllB,IAA2lByE,EAAK/H,MAAMiD,aAAamC,GAAGG,gBAJloBH,EAAI,EAAGA,EAAIxF,KAAKI,MAAMiD,aAAaoC,OAAQD,IAAK,KACnDE,EACA0B,EAFmDmB,EAAhD/C,GAOT,IAAIkD,EAAqB,KAczB,OAbGJ,EAAc7C,OAAS,IACxBiD,EAAsBnH,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAgBV,OAAQhB,KAAKI,MAAMmC,aAAc1B,OAAQb,KAAKa,QACpFU,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAgBiH,OAAK,EAAEH,SAAUxI,KAAKuF,iBAAmBvF,KAAK8E,aAAc8D,KAAK,MACjFrH,EAAAC,EAAAC,cAACoH,EAAA,EAAD,CAAiBC,KAAMC,OAEvBxH,EAAAC,EAAAC,cAACC,EAAA,EAAD,KAEC4G,KAMCtI,KAAKkH,oBAKP3F,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKsH,GAAG,KACNzH,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMO,UAAU,SAChBV,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACGhB,GAAgBA,EAAaE,OAEhCW,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACAH,EAAAC,EAAAC,cAACC,EAAA,EAAD,SAAgB1B,KAAKM,aAArB,IAAoC8H,GAAUA,EAAOxH,OACrDW,EAAAC,EAAAC,cAACC,EAAA,EAAD,SAAWH,EAAAC,EAAAC,cAAA,aAAOF,EAAAC,EAAAC,cAAA,sBACTzB,KAAKsG,kBADI,aACyBtG,KAAK+G,wBAD9B,wBAC4E/G,KAAKwG,iBADjF,WAMlBjF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAASuH,KAAG,EAACC,MAAM,OAAOC,aAAW,KAAKC,IAAKC,OAAQ,KAAYrJ,KAAKH,MAAMa,aAAa4I,cAAcC,QAAQ,eAAgB,KAAKA,QAAQ,OAAQ,KAAK,QAASC,IAAI,mBACxKjI,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAAA,qCAAmCF,EAAAC,EAAAC,cAAA,WACnCF,EAAAC,EAAAC,cAAA,iCAAyBzB,KAAK+F,mBAA9B,YAAiExE,EAAAC,EAAAC,cAAA,WACjEF,EAAAC,EAAAC,cAAA,mCAA2BzB,KAAKiG,sBAA6B1E,EAAAC,EAAAC,cAAA,WAC7DF,EAAAC,EAAAC,cAAA,oBAAaF,EAAAC,EAAAC,cAAA,SAAOQ,UAAW,CAAC,cAAejC,KAAK8E,eAAiB9E,KAAKuF,iBAAoBP,GAAwBA,EAAqBpE,MAAQ,EAAK,GAAK,aAAa6I,KAAK,MAAlK,mBAAyLnE,EAAgBoE,iBAAzM,MAA2OnI,EAAAC,EAAAC,cAAA,WACxPF,EAAAC,EAAAC,cAAA,oBAAaF,EAAAC,EAAAC,cAAA,SAAOQ,UAAW,CAAC,aAAajC,KAAK8E,cAAgB9E,KAAK8F,iBAAmB,GAAK,aAAa2D,KAAK,MAApG,kBAA0HtE,EAAeuE,mBAAiCnI,EAAAC,EAAAC,cAAA,WACvLF,EAAAC,EAAAC,cAAA,oBAAaF,EAAAC,EAAAC,cAAA,SAAOQ,UAAW,CAAC,aAAajC,KAAK4E,cAAgB,GAAK,aAAa6E,KAAK,MAAOzJ,KAAKqE,kBAGzG9C,EAAAC,EAAAC,cAACC,EAAA,EAAD,KAEAH,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACGgH,EACDnH,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQiI,MAAM,mBAAmBf,KAAK,KAAKjH,MAAO3B,KAAKuF,gBAAkB,UAAY,GAAIxD,QAAS,kBAAMoG,EAAKnE,kBAAkBwE,SAAUxI,KAAK4E,gBAAkB5E,KAAKuF,iBAAiBhE,EAAAC,EAAAC,cAACoH,EAAA,EAAD,CAAiBC,KAAMc,OAC7MrI,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQiI,MAAM,eAAef,KAAK,KAAKjH,MAAO3B,KAAK8E,aAAe,UAAY,GAAI/C,QAAS,kBAAMoG,EAAKhE,aAAaqE,SAAUxI,KAAK4E,gBAAkB5E,KAAK8E,cAAcvD,EAAAC,EAAAC,cAACoH,EAAA,EAAD,CAAiBC,KAAMe,OAC7L7J,KAAKqG,iBACL9E,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQiI,MAAM,uBAAuBf,KAAK,KAAKjH,MAAM,UAAU6G,SAAUxI,KAAK4E,cAAe7C,QAAS,kBAAMoG,EAAK1B,iBAAgBlF,EAAAC,EAAAC,cAACoH,EAAA,EAAD,CAAiBC,KAAMgB,WAnCtJ,YAxZW1H,IAAMC,WCoCnB0H,mLAjDT,OACFxI,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACIH,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKO,UAAU,aACbV,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAAA,iCAGJF,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACIH,EAAAC,EAAAC,cAACuI,EAAD,CACEtJ,aAAa,OACbQ,QAASlB,KAAKH,MAAMqB,QACpBV,aAAcR,KAAKH,MAAMW,eAE3Be,EAAAC,EAAAC,cAACuI,EAAD,CACEtJ,aAAa,QACbQ,QAASlB,KAAKH,MAAMqB,QACpBV,aAAcR,KAAKH,MAAMW,eAE3Be,EAAAC,EAAAC,cAACuI,EAAD,CACEtJ,aAAa,OACbQ,QAASlB,KAAKH,MAAMqB,QACpBV,aAAcR,KAAKH,MAAMW,eAE3Be,EAAAC,EAAAC,cAACuI,EAAD,CACEtJ,aAAa,QACbQ,QAASlB,KAAKH,MAAMqB,QACpBV,aAAcR,KAAKH,MAAMW,gBAG/Be,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKO,UAAU,QAEXV,EAAAC,EAAAC,cAACuI,EAAD,CACEtJ,aAAa,SACbQ,QAASlB,KAAKH,MAAMqB,QACpBV,aAAcR,KAAKH,MAAMW,eAE3Be,EAAAC,EAAAC,cAACuI,EAAD,CACEtJ,aAAa,QACbQ,QAASlB,KAAKH,MAAMqB,QACpBV,aAAcR,KAAKH,MAAMW,wBAzCd4B,IAAMC,WC8ChB4H,mLA5CT,OACF1I,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACIH,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKO,UAAU,aACbV,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAAA,uCAIJF,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACIH,EAAAC,EAAAC,cAACuI,EAAD,CACEtJ,aAAa,QACbQ,QAASlB,KAAKH,MAAMqB,QACpBV,aAAcR,KAAKH,MAAMW,eAE3Be,EAAAC,EAAAC,cAACuI,EAAD,CACEtJ,aAAa,YACbQ,QAASlB,KAAKH,MAAMqB,QACpBV,aAAcR,KAAKH,MAAMW,eAE3Be,EAAAC,EAAAC,cAACuI,EAAD,CACEtJ,aAAa,UACbQ,QAASlB,KAAKH,MAAMqB,QACpBV,aAAcR,KAAKH,MAAMW,eAE3Be,EAAAC,EAAAC,cAACuI,EAAD,CACEtJ,aAAa,WACbQ,QAASlB,KAAKH,MAAMqB,QACpBV,aAAcR,KAAKH,MAAMW,gBAI/Be,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACIH,EAAAC,EAAAC,cAACuI,EAAD,CACEtJ,aAAa,oBACbQ,QAASlB,KAAKH,MAAMqB,QACpBV,aAAcR,KAAKH,MAAMW,wBArCb4B,IAAMC,WC2CjB4H,mLAxCX,IAAIC,EAAOlK,KACT,OACFuB,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACIH,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKO,UAAU,aACbV,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,yIAC+HF,EAAAC,EAAAC,cAAA,WAD/H,2GAKAF,EAAAC,EAAAC,cAAA,8BAGAF,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,MAAKQ,UAAU,cACZV,EAAAC,EAAAC,cAAA,MAAIQ,UAAU,mBAAd,0DACAV,EAAAC,EAAAC,cAAA,MAAIQ,UAAU,mBAAd,2FACAV,EAAAC,EAAAC,cAAA,MAAIQ,UAAU,mBAAd,uFACAV,EAAAC,EAAAC,cAAA,MAAIQ,UAAU,mBAAd,8BACAV,EAAAC,EAAAC,cAAA,MAAIQ,UAAU,mBAAd,6DAA2FiI,EAAKrK,MAAMqB,QAAQT,UAAnB,aAA6CqD,SACxIvC,EAAAC,EAAAC,cAAA,MAAIQ,UAAU,mBAAd,iDACAV,EAAAC,EAAAC,cAAA,MAAIQ,UAAU,mBAAd,8GACAV,EAAAC,EAAAC,cAAA,MAAIQ,UAAU,mBAAd,kBAOH1C,OAAOD,KAAKU,KAAKH,MAAMqB,QAAQT,WAAWjD,IAAI,SAAS6K,EAAMP,GACtD,OAAOvG,EAAAC,EAAAC,cAAA,KAAGgH,IAAKX,GAAOvG,EAAAC,EAAAC,cAAA,UAAK4G,GAApB,KAAiC6B,EAAKrK,MAAMqB,QAAQT,UAAU4H,GAAMvE,mBApCrE1B,IAAMC,6BCyBjB8H,mLArBT,OACF5I,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACIH,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKO,UAAU,aACbV,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAAA,2CAGJF,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACIH,EAAAC,EAAAC,cAACuI,EAAD,CACEtJ,aAAa,WACbQ,QAASlB,KAAKH,MAAMqB,QACpBV,aAAcR,KAAKH,MAAMW,wBAbf4B,IAAMC,mBC+Cf+H,mLAhCX,OAEE7I,EAAAC,EAAAC,cAAC4I,EAAA,EAAD,CAASC,SAAS,gBAClB/I,EAAAC,EAAAC,cAAC8I,EAAA,eAAeC,SAAhB,KACD,SAAAC,GAAkB,IACTvJ,EAAuCuJ,EAAvCvJ,QAASV,EAA8BiK,EAA9BjK,aAEjB,OAF+CiK,EAAhBhD,YAO7BlG,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,OACfV,EAAAC,EAAAC,cAACiJ,EAAD,CAAQxJ,QAASA,EAASV,aAAcA,EAAcE,aAAa,iBAEjEa,EAAAC,EAAAC,cAAA,WACFF,EAAAC,EAAAC,cAACkJ,EAAA,EAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,OAAQ,SAACjL,GAAD,OAAW0B,EAAAC,EAAAC,cAACsJ,EAADxL,OAAAyL,OAAA,GAAgBnL,EAAhB,CAAuBqB,QAASA,EAASV,aAAcA,QAChGe,EAAAC,EAAAC,cAACkJ,EAAA,EAAD,CAAOC,KAAK,UAAUE,OAAQ,SAACjL,GAAD,OAAW0B,EAAAC,EAAAC,cAACwJ,EAAD1L,OAAAyL,OAAA,GAAiBnL,EAAjB,CAAyBqB,QAASA,EAASV,aAAcA,QAClGe,EAAAC,EAAAC,cAACkJ,EAAA,EAAD,CAAOC,KAAK,cAAcE,OAAQ,SAACjL,GAAD,OAAW0B,EAAAC,EAAAC,cAACyJ,EAAD3L,OAAAyL,OAAA,GAAenL,EAAf,CAAwBqB,QAASA,EAAUV,aAAcA,QACtGe,EAAAC,EAAAC,cAACkJ,EAAA,EAAD,CAAOC,KAAK,QAAQE,OAAQ,SAACjL,GAAD,OAAW0B,EAAAC,EAAAC,cAAC0J,EAAD5L,OAAAyL,OAAA,GAAmBnL,EAAnB,CAA4BqB,QAASA,EAAUV,aAAcA,UAX7F,yCAbG6B,aCJE+I,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iKCUAC,EAAU,CACZhL,UAAW,CAACiL,EAAOC,EAAMC,EAAMC,EAAOC,SAAcC,EAASC,EAAOC,EAAWC,EAAUC,iBACzFC,YAAY,EACZC,MAAO,CAAEC,OAAQ,MAIfC,EAAeC,wBAAcf,GAC7BvK,EAAU,IAAIuL,UAAQhB,EAASc,GAGrCG,IAAS5B,OAASvJ,EAAAC,EAAAC,cAAC8I,EAAA,eAAeoC,SAAhB,CAAyBzL,QAASA,GAASK,EAAAC,EAAAC,cAACmL,EAAD,OAAmCC,SAASC,eAAe,SD0FlH,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtF,KAAK,SAAAuF,GACjCA,EAAaC","file":"static/js/main.7e8bc72d.chunk.js","sourcesContent":["var map = {\n\t\"./bread.jpg\": 232,\n\t\"./bun.jpg\": 233,\n\t\"./cherry.jpg\": 234,\n\t\"./cookies.jpg\": 235,\n\t\"./cupcakes.jpg\": 236,\n\t\"./donut.jpg\": 237,\n\t\"./dough.jpg\": 238,\n\t\"./eggs.jpg\": 239,\n\t\"./flour.jpg\": 240,\n\t\"./hotdog.jpg\": 241,\n\t\"./ketchup.jpg\": 242,\n\t\"./layercake.jpg\": 243,\n\t\"./lettuce.jpg\": 244,\n\t\"./meat.jpg\": 245,\n\t\"./milk.jpg\": 246,\n\t\"./mustard.jpg\": 247,\n\t\"./sausage.jpg\": 248,\n\t\"./sprinkle.jpg\": 249,\n\t\"./sprinkledcupcakes.jpg\": 250,\n\t\"./sugar.jpg\": 251,\n\t\"./tomato.jpg\": 252\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) { // check for number or string\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn id;\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 231;","module.exports = __webpack_public_path__ + \"static/media/bread.279a20a4.jpg\";","module.exports = __webpack_public_path__ + \"static/media/bun.bb588392.jpg\";","module.exports = __webpack_public_path__ + \"static/media/cherry.16812e2d.jpg\";","module.exports = __webpack_public_path__ + \"static/media/cookies.0cda2a23.jpg\";","module.exports = __webpack_public_path__ + \"static/media/cupcakes.83bd8476.jpg\";","module.exports = __webpack_public_path__ + \"static/media/donut.bfc56702.jpg\";","module.exports = __webpack_public_path__ + \"static/media/dough.ea1ec4e3.jpg\";","module.exports = __webpack_public_path__ + \"static/media/eggs.8af8621c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/flour.e9f6270e.jpg\";","module.exports = __webpack_public_path__ + \"static/media/hotdog.ce863ebf.jpg\";","module.exports = __webpack_public_path__ + \"static/media/ketchup.0b00c6a5.jpg\";","module.exports = __webpack_public_path__ + \"static/media/layercake.23fba89b.jpg\";","module.exports = __webpack_public_path__ + \"static/media/lettuce.b07a8dec.jpg\";","module.exports = __webpack_public_path__ + \"static/media/meat.be9c91a3.jpg\";","module.exports = __webpack_public_path__ + \"static/media/milk.4185e853.jpg\";","module.exports = __webpack_public_path__ + \"static/media/mustard.db3dc86a.jpg\";","module.exports = __webpack_public_path__ + \"static/media/sausage.540da835.jpg\";","module.exports = __webpack_public_path__ + \"static/media/sprinkle.f9aabd1c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/sprinkledcupcakes.31700d03.jpg\";","module.exports = __webpack_public_path__ + \"static/media/sugar.c09add23.jpg\";","module.exports = __webpack_public_path__ + \"static/media/tomato.5022186b.jpg\";","import React from \"react\";\r\nimport {\r\n    Collapse,\r\n    Navbar,\r\n    NavbarToggler,\r\n    NavbarBrand,\r\n    Nav,\r\n    NavItem } from 'reactstrap';\r\n    import { Link } from \"react-router-dom\";\r\n\r\n\r\nclass NavBar extends React.Component {\r\n\r\n  state = {\r\n    balanceKey: null\r\n  };\r\n\r\n    constructor(props) {\r\n      super(props);\r\n\r\n      this.toggle = this.toggle.bind(this);\r\n      this.state = {\r\n        isOpen: false\r\n      };\r\n    }\r\n\r\n    componentDidMount() {\r\n      const {\r\n        drizzle,\r\n        drizzleState,\r\n        resourceName\r\n      } = this.props;\r\n      const contract = drizzle.contracts[resourceName]; \r\n      const balanceKey = contract.methods[\"balanceOf\"].cacheCall(drizzleState.accounts[0]);\r\n      this.setState({\r\n        balanceKey\r\n      });\r\n\r\n    }\r\n\r\n    getBalance = () => {\r\n      const contract = this.props.drizzleState.contracts[this.props.resourceName];\r\n      let balance = contract.balanceOf[this.state.balanceKey];\r\n      if (balance && balance.value) {\r\n        return balance.value;\r\n      }\r\n      return 0;\r\n    }\r\n\r\n    toggle() {\r\n      this.setState({\r\n        isOpen: !this.state.isOpen\r\n      });\r\n    }\r\n    render() {\r\n        return (\r\n          <div>\r\n            <Navbar color=\"dark\" dark expand=\"md\">\r\n              <NavbarBrand href=\"/\">$$ {this.getBalance()} DTM</NavbarBrand>\r\n              <NavbarToggler onClick={this.toggle} />\r\n              <Collapse isOpen={this.state.isOpen} navbar>\r\n                <Nav className=\"ml-auto\" navbar>\r\n                  <NavItem>\r\n                    <Link to=\"/\" className=\"nav-link\">Basic Ingredients</Link>\r\n                  </NavItem>\r\n                  <NavItem>\r\n                    <Link to=\"/decoration\"  className=\"nav-link\">Decoration</Link>\r\n                  </NavItem>\r\n                  <NavItem>\r\n                    <Link to=\"/simple\"  className=\"nav-link\">Simple Cakes</Link>\r\n                  </NavItem>\r\n                  <NavItem>\r\n                    <Link to=\"/help\"  className=\"nav-link\">HELP!</Link>\r\n                  </NavItem>\r\n                </Nav>\r\n              </Collapse>\r\n            </Navbar>\r\n          </div>\r\n        );\r\n      }\r\n}\r\n\r\nexport default NavBar;","import React from \"react\";\r\nimport {\r\n  Card,\r\n  CardImg,\r\n  CardText,\r\n  CardBody,\r\n  CardSubtitle,\r\n  Button,\r\n  ButtonGroup,\r\n  CardFooter,\r\n  Col,\r\n  ButtonDropdown,\r\n  DropdownToggle,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  CardHeader\r\n} from 'reactstrap';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faAngleDoubleUp, faIndustry, faTruckPickup, faExchangeAlt} from '@fortawesome/free-solid-svg-icons'\r\n\r\nclass MergeResource extends React.Component {\r\n    state = {\r\n      dropdownOpen: false,\r\n      stackId: null,\r\n      mintableKey: null,\r\n      symbolKey: null,\r\n      nameKey: null,\r\n      balanceKey: null,\r\n      factoryLevelKey: null,\r\n      getUpgradeCostKey: null,\r\n      timeUntilCollectableKey: null,\r\n      timeUntilCollectExpiresKey: null,\r\n      timeToProduceKey: null,\r\n      amountCollectionLevelKey: null,\r\n      amountGameCurrencyAvailableKey: null,\r\n      gameCurrencyProductionAmountOnCollectKey: null,\r\n      tooltipOpen: false,\r\n      dependencies: [],\r\n      amounts: [],\r\n      availabilityKeys: []\r\n    };\r\n\r\n    componentDidMount() {\r\n      const {\r\n        drizzle,\r\n        drizzleState,\r\n        resourceName\r\n      } = this.props;\r\n\r\n      if (drizzleState.drizzleStatus.initialized) {\r\n        const contract = drizzle.contracts[resourceName];\r\n        contract.methods.getTokenDependency().call().then(res => {\r\n          var dependencies = [];\r\n          Object.keys(drizzle.contracts).map(function (objectKey, index) {\r\n            var indexOfDep = res[0].indexOf(drizzle.contracts[objectKey].address);\r\n            if (indexOfDep !== -1) {\r\n              var objDependency = {\r\n                contractName: objectKey,\r\n                amount: res[1][indexOfDep],\r\n                balanceKey: drizzle.contracts[objectKey].methods[\"balanceOf\"].cacheCall(drizzleState.accounts[0]),\r\n                allowanceKey: drizzle.contracts[objectKey].methods[\"allowance\"].cacheCall(drizzleState.accounts[0], contract.address)\r\n              }\r\n              dependencies.push(objDependency);\r\n            }\r\n            return null;\r\n          });\r\n          this.setState({\r\n            dependencies\r\n          });\r\n        });\r\n\r\n        const amountGameCurrencyAvailableKey = drizzle.contracts[\"GameCurrency\"].methods[\"balanceOf\"].cacheCall(drizzleState.accounts[0]);\r\n        this.setState({amountGameCurrencyAvailableKey});\r\n\r\n\r\n\r\n\r\n        const mintableKey = contract.methods[\"tokenCollectable\"].cacheCall();\r\n        this.setState({\r\n          mintableKey\r\n        });\r\n\r\n\r\n        const gameCurrencyProductionAmountOnCollectKey = contract.methods[\"gameCurrencyProductionAmountOnCollect\"].cacheCall();\r\n        this.setState({\r\n          gameCurrencyProductionAmountOnCollectKey\r\n        });\r\n\r\n        const timeUntilCollectableKey = contract.methods[\"timeUntilCollectable\"].cacheCall();\r\n        this.setState({\r\n          timeUntilCollectableKey\r\n        });\r\n\r\n        const timeUntilCollectExpiresKey = contract.methods[\"timeUntilCollectionExpires\"].cacheCall();\r\n        this.setState({\r\n          timeUntilCollectExpiresKey\r\n        });\r\n\r\n        const timeToProduceKey = contract.methods[\"getTimeToCollectBasedOnLevel\"].cacheCall();\r\n        this.setState({\r\n          timeToProduceKey\r\n        });\r\n        const amountCollectionLevelKey = contract.methods[\"getCollectionAmountBasedOnLevel\"].cacheCall();\r\n        this.setState({\r\n          amountCollectionLevelKey\r\n        });\r\n\r\n        const symbolKey = contract.methods[\"symbol\"].cacheCall();\r\n        this.setState({\r\n          symbolKey\r\n        });\r\n\r\n\r\n        const nameKey = contract.methods[\"name\"].cacheCall();\r\n        this.setState({\r\n          nameKey\r\n        });\r\n\r\n        const balanceKey = contract.methods[\"balanceOf\"].cacheCall(drizzleState.accounts[0]);\r\n        this.setState({\r\n          balanceKey\r\n        });\r\n\r\n        const factoryLevelKey = contract.methods[\"factoryLevel\"].cacheCall(drizzleState.accounts[0]);\r\n        this.setState({\r\n          factoryLevelKey\r\n        });\r\n\r\n        const getUpgradeCostKey = contract.methods[\"getLevelUpgradeCost\"].cacheCall();\r\n        this.setState({\r\n          getUpgradeCostKey\r\n        });\r\n      }\r\n    }\r\n\r\n    addElement = (resourceToName, amount) => {\r\n      const {\r\n        drizzle,\r\n        drizzleState,\r\n        resourceName\r\n      } = this.props;\r\n      const contract_from = drizzle.contracts[resourceToName];\r\n      const contract_to = drizzle.contracts[resourceName];\r\n\r\n      const stackId = contract_from.methods[\"approve\"].cacheSend(contract_to.address, amount, {\r\n        from: drizzleState.accounts[0]\r\n      });\r\n      this.setState({\r\n        stackId\r\n      });\r\n    }\r\n\r\n    startAcquiring = () => {\r\n      const {\r\n        drizzle,\r\n        drizzleState,\r\n        resourceName\r\n      } = this.props;\r\n      const contract = drizzle.contracts[resourceName];\r\n\r\n      const stackId = contract.methods[\"startProducing\"].cacheSend({\r\n        from: drizzleState.accounts[0],\r\n        gas: 5000000\r\n      });\r\n      this.setState({\r\n        stackId\r\n      });\r\n    };\r\n    mintToken = () => {\r\n      const {\r\n        drizzle,\r\n        drizzleState,\r\n        resourceName\r\n      } = this.props;\r\n      const contract = drizzle.contracts[resourceName];\r\n\r\n      const stackId = contract.methods[\"collectToken\"].cacheSend({\r\n        from: drizzleState.accounts[0]\r\n      });\r\n      this.setState({\r\n        stackId\r\n      });\r\n    };\r\n\r\n    getTxStatus = () => {\r\n      // get the transaction states from the drizzle state\r\n      const {\r\n        transactions,\r\n        transactionStack\r\n      } = this.props.drizzleState;\r\n\r\n      // get the transaction hash using our saved `stackId`\r\n      const txHash = transactionStack[this.state.stackId];\r\n\r\n      // if transaction hash does not exist, don't display anything\r\n      if (!txHash) return null;\r\n\r\n      // otherwise, return the transaction status\r\n      return `Transaction status: ${transactions[txHash].status}`;\r\n    };\r\n\r\n    isTxPending = () => {\r\n      // get the transaction states from the drizzle state\r\n      const {\r\n        transactions,\r\n        transactionStack\r\n      } = this.props.drizzleState;\r\n\r\n      // get the transaction hash using our saved `stackId`\r\n      const txHash = transactionStack[this.state.stackId];\r\n\r\n      if (!txHash) {\r\n        return false;\r\n      }\r\n\r\n      if (transactions[txHash].status === \"pending\") {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    isMintable = () => {\r\n      const contract = this.props.drizzleState.contracts[this.props.resourceName];\r\n      const timeUntilCollectable = contract.timeUntilCollectable[this.state.timeUntilCollectableKey];\r\n      const timeCollectableExpires = contract.timeUntilCollectionExpires[this.state.timeUntilCollectExpiresKey];\r\n      const collectExpires = timeCollectableExpires ? new Date(timeCollectableExpires.value * 1000) : new Date();\r\n\r\n      var date = new Date();\r\n      var collectibleDate = timeUntilCollectable ? new Date(timeUntilCollectable.value * 1000) : new Date();\r\n      return timeUntilCollectable && timeUntilCollectable.value !== 0 && collectibleDate <= date && collectExpires >= date;\r\n    }\r\n\r\n    isProduceable = () => {\r\n      let enoughResourcesAvailable = true;\r\n      for (let i = 0; i < this.state.dependencies.length; i++) {\r\n        var dependentContractName = this.state.dependencies[i].contractName;\r\n        var allowanceKey = this.state.dependencies[i].allowanceKey;\r\n        enoughResourcesAvailable = this.props.drizzleState.contracts[dependentContractName].allowance[allowanceKey] && this.props.drizzleState.contracts[dependentContractName].allowance[allowanceKey].value * 1 >= this.state.dependencies[i].amount;\r\n        if (!enoughResourcesAvailable) {\r\n          return false;\r\n        }\r\n      }\r\n\r\n\r\n      const contract = this.props.drizzleState.contracts[this.props.resourceName];\r\n      const timeUntilCollectable = contract.timeUntilCollectable[this.state.timeUntilCollectableKey];\r\n      const timeCollectableExpires = contract.timeUntilCollectionExpires[this.state.timeUntilCollectExpiresKey];\r\n      const collectExpires = timeCollectableExpires ? new Date(timeCollectableExpires.value * 1000) : new Date();\r\n\r\n      var date = new Date();\r\n      return timeUntilCollectable && (timeUntilCollectable.value === 0 || collectExpires < date);\r\n    }\r\n\r\n    isInProduction = () => {\r\n      const contract = this.props.drizzleState.contracts[this.props.resourceName];\r\n      const timeUntilCollectable = contract.timeUntilCollectable[this.state.timeUntilCollectableKey];\r\n\r\n      var date = new Date();\r\n      var collectibleDate = timeUntilCollectable ? new Date(timeUntilCollectable.value * 1000) : new Date();\r\n      return timeUntilCollectable && timeUntilCollectable.value !== 0 && collectibleDate > date;\r\n    }\r\n    getTimeToProduce = () => {\r\n      const contract = this.props.drizzleState.contracts[this.props.resourceName];\r\n      const timeUntilCollectable = contract.getTimeToCollectBasedOnLevel[this.state.timeToProduceKey];\r\n\r\n      return timeUntilCollectable && timeUntilCollectable.value;\r\n    }\r\n    getAmountToCollect = () => {\r\n      const contract = this.props.drizzleState.contracts[this.props.resourceName];\r\n      const timeUntilCollectable = contract.getCollectionAmountBasedOnLevel[this.state.amountCollectionLevelKey];\r\n\r\n      return timeUntilCollectable && timeUntilCollectable.value;\r\n    }\r\n\r\n    getBalance = () => {\r\n      const contract = this.props.drizzleState.contracts[this.props.resourceName];\r\n      let balance = contract.balanceOf[this.state.balanceKey];\r\n      if (balance && balance.value) {\r\n        return balance.value;\r\n      }\r\n      return 0;\r\n    }\r\n    amountIngredientsTransferred = (ingredientName) => {\r\n\r\n      for (let i = 0; i < this.state.dependencies.length; i++) {\r\n        if (ingredientName === this.state.dependencies[i].contractName) {\r\n          var dependentContractName = this.state.dependencies[i].contractName;\r\n          var allowanceKey = this.state.dependencies[i].allowanceKey;\r\n          return this.props.drizzleState.contracts[dependentContractName].allowance[allowanceKey] && this.props.drizzleState.contracts[dependentContractName].allowance[allowanceKey].value * 1;\r\n        }\r\n      }\r\n    }\r\n\r\n    isUpgradeable = () => {\r\n      if(this.getFactoryLevel() < 5) {\r\n        const gameCurrencyBalance = this.props.drizzleState.contracts[\"GameCurrency\"].balanceOf[this.state.amountGameCurrencyAvailableKey];\r\n        if(gameCurrencyBalance && (gameCurrencyBalance.value*1 >= this.getUpgradeCost())) {\r\n          return true;\r\n        }\r\n      }\r\n      return false;\r\n    }\r\n\r\n    upgradeToken = () => {\r\n      const {\r\n        drizzle,\r\n        drizzleState,\r\n        resourceName\r\n      } = this.props;\r\n      const contract = drizzle.contracts[resourceName];\r\n\r\n      const stackId = contract.methods[\"levelUp\"].cacheSend({\r\n        from: drizzleState.accounts[0],\r\n        gas: 1000000\r\n      });\r\n      this.setState({\r\n        stackId\r\n      });\r\n    }\r\n\r\n    getFactoryLevel = () => {\r\n\r\n      const contract = this.props.drizzleState.contracts[this.props.resourceName];\r\n      let level = contract.factoryLevel[this.state.factoryLevelKey];\r\n      if (level && level.value) {\r\n        return level.value;\r\n      }\r\n      return 0;\r\n    }\r\n\r\n    getUpgradeCost = () => {\r\n      const contract = this.props.drizzleState.contracts[this.props.resourceName];\r\n      let cost = contract.getLevelUpgradeCost[this.state.getUpgradeCostKey];\r\n      if (cost && cost.value) {\r\n        return cost.value;\r\n      }\r\n      return 0;\r\n    }\r\n\r\n    getGameCurrencyAmount = () => {\r\n      const contract = this.props.drizzleState.contracts[this.props.resourceName];\r\n      let gameCurrencyAmount = contract.gameCurrencyProductionAmountOnCollect[this.state.gameCurrencyProductionAmountOnCollectKey];\r\n      if (gameCurrencyAmount && gameCurrencyAmount.value) {\r\n        return gameCurrencyAmount.value;\r\n      }\r\n      return 0;\r\n    }\r\n\r\n\r\n    enoughIngredients = () => {\r\n      let hasResource = false;\r\n      for (let i = 0; i < this.state.dependencies.length; i++) {\r\n        var dependentContractName = this.state.dependencies[i].contractName;\r\n        var dependentContractBalanceKey = this.state.dependencies[i].balanceKey;\r\n        if (this.props.drizzleState.contracts[dependentContractName].balanceOf[dependentContractBalanceKey]) {\r\n          if (this.props.drizzleState.contracts[dependentContractName].balanceOf[dependentContractBalanceKey].value * 1 >= this.state.dependencies[i].amount) {\r\n            hasResource = true;\r\n          }\r\n        }\r\n\r\n      }\r\n      if (hasResource) {\r\n        return true;\r\n      }\r\n      if (this.isProduceable()) {\r\n        return true;\r\n      }\r\n      if (this.isMintable()) {\r\n        return true;\r\n      }\r\n      if (this.isInProduction()) {\r\n        return true;\r\n      }\r\n      if (this.getBalance() > 0) {\r\n        return true;\r\n      }\r\n\r\n      //otherwise, we can't build that, so hide it.\r\n      return false;\r\n\r\n    }\r\n\r\n    toggle = () => {\r\n      this.setState({\r\n        dropdownOpen: !this.state.dropdownOpen\r\n      });\r\n    }\r\n\r\n    toggleToolip = () => {\r\n      this.setState({\r\n        tooltipOpen: !this.state.tooltipOpen\r\n      });\r\n    }\r\n\r\n\r\n    render() {\r\n        const contract = this.props.drizzleState.contracts[this.props.resourceName];\r\n\r\n        const timeUntilCollectable = contract.timeUntilCollectable[this.state.timeUntilCollectableKey];\r\n        const collectibleDate = timeUntilCollectable ? new Date(timeUntilCollectable.value * 1000) : new Date();\r\n\r\n        const timeCollectableExpires = contract.timeUntilCollectionExpires[this.state.timeUntilCollectExpiresKey];\r\n        const collectExpires = timeCollectableExpires ? new Date(timeCollectableExpires.value * 1000) : new Date();\r\n        const symbol = contract.symbol[this.state.symbolKey];\r\n        const resourceName = contract.name[this.state.nameKey];\r\n\r\n        let dependentRows = [];\r\n        for (let i = 0; i < this.state.dependencies.length; i++) {\r\n          var dependentContractName = this.state.dependencies[i].contractName;\r\n          var dependentContractBalanceKey = this.state.dependencies[i].balanceKey;\r\n      \r\n          dependentRows.push(<DropdownItem className={(this.amountIngredientsTransferred(dependentContractName) >= this.state.dependencies[i].amount) ? \"text-success\" : ''} disabled={(this.props.drizzleState.contracts[dependentContractName].balanceOf[dependentContractBalanceKey] && this.props.drizzleState.contracts[dependentContractName].balanceOf[dependentContractBalanceKey].value*1 < this.state.dependencies[i].amount) || this.isProduceable() || this.isMintable()} key={i} onClick={() => this.addElement(this.state.dependencies[i].contractName, this.state.dependencies[i].amount)}>Transfer {this.state.dependencies[i].amount} {this.state.dependencies[i].contractName}</DropdownItem>);\r\n        \r\n        }\r\n        let tokenDependencyArr = null;\r\n        if(dependentRows.length > 0) {\r\n          tokenDependencyArr = (<ButtonDropdown isOpen={this.state.dropdownOpen} toggle={this.toggle}>\r\n          <DropdownToggle caret  disabled={this.isProduceable() || this.isMintable()} size=\"sm\">\r\n          <FontAwesomeIcon icon={faExchangeAlt}/>\r\n          </DropdownToggle>\r\n          <DropdownMenu>\r\n            \r\n          {dependentRows}\r\n          </DropdownMenu>\r\n          \r\n          </ButtonDropdown>);\r\n        }\r\n\r\n        if(!this.enoughIngredients()) {\r\n          return null;\r\n        }\r\n\r\n        return (\r\n          <Col xs=\"3\">\r\n            <Card className=\"h-100\">\r\n            <CardHeader>\r\n              {resourceName && resourceName.value} \r\n            </CardHeader>\r\n            <CardBody>\r\n            <CardSubtitle> {this.getBalance()} {symbol && symbol.value}</CardSubtitle>\r\n            <CardText> <small><small>\r\n              Level {this.getFactoryLevel()} | Brings {this.getGameCurrencyAmount()} DTM | Upgrade Cost: {this.getUpgradeCost()} DTM\r\n\r\n          </small></small>\r\n              </CardText>\r\n            </CardBody>\r\n            <CardImg top width=\"100%\" max-height=\"50\" src={require('./assets/'+this.props.resourceName.toLowerCase().replace(/[^a-z0-9]/gmi, \" \").replace(/\\s+/g, \" \")+'.jpg')} alt=\"Card image cap\" />\r\n            <CardBody>\r\n              <CardText>\r\n                <small>- At current level -</small><br />\r\n                <small>Time to Produce: {this.getTimeToProduce()} seconds</small><br />\r\n                <small>Production Amount: {this.getAmountToCollect()}</small><br />\r\n                <small>&nbsp;<small className={['text-muted', !this.isMintable() && !this.isProduceable() && (timeUntilCollectable && timeUntilCollectable.value > 0) ? \"\" : \"invisible\"].join(' ')}>Producing until {collectibleDate.toLocaleString()}.</small></small><br />\r\n                <small>&nbsp;<small className={['text-muted',this.isMintable() || this.isInProduction() ? \"\" : \"invisible\"].join(' ')}>Collect before {collectExpires.toLocaleString()}</small></small><br />\r\n                <small>&nbsp;<small className={['text-muted',this.isTxPending() ? \"\" : \"invisible\"].join(' ')}>{this.getTxStatus()}</small></small>\r\n              </CardText>\r\n            </CardBody>\r\n            <CardFooter>\r\n            \r\n            <ButtonGroup>\r\n              {tokenDependencyArr}\r\n              <Button title=\"Start Production\" size=\"sm\" color={this.isProduceable() ? \"success\" : \"\"} onClick={() => this.startAcquiring()} disabled={this.isTxPending() || !this.isProduceable()}><FontAwesomeIcon icon={faIndustry}/></Button>\r\n              <Button title=\"Collect item\" size=\"sm\" color={this.isMintable() ? \"warning\" : \"\"} onClick={() => this.mintToken()} disabled={this.isTxPending() || !this.isMintable()}><FontAwesomeIcon icon={faTruckPickup}/></Button>\r\n              {this.isUpgradeable() &&\r\n               <Button title=\"Upgrade this Factory\" size=\"sm\" color=\"success\" disabled={this.isTxPending()} onClick={() => this.upgradeToken()}><FontAwesomeIcon icon={faAngleDoubleUp} /></Button> \r\n              }\r\n              </ButtonGroup>\r\n            </CardFooter>\r\n          </Card>\r\n          </Col>\r\n        );\r\n  }\r\n}\r\n\r\nexport default MergeResource;","import React from \"react\";\r\n\r\nimport MergeResource from \"./MergeResource\";\r\n\r\nimport { Container, Row, Col } from 'reactstrap';\r\n\r\nclass GroupBasic extends React.Component {\r\n  render() {\r\n      return (\r\n    <Container>\r\n        <Row className=\"mt-3 mb-3\">\r\n          <Col>\r\n            <h2>Basic Ingredients</h2>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n            <MergeResource\r\n              resourceName=\"Milk\"\r\n              drizzle={this.props.drizzle}\r\n              drizzleState={this.props.drizzleState}\r\n            />\r\n            <MergeResource\r\n              resourceName=\"Flour\"\r\n              drizzle={this.props.drizzle}\r\n              drizzleState={this.props.drizzleState}\r\n            />\r\n            <MergeResource\r\n              resourceName=\"Eggs\"\r\n              drizzle={this.props.drizzle}\r\n              drizzleState={this.props.drizzleState}\r\n            />\r\n            <MergeResource\r\n              resourceName=\"Sugar\"\r\n              drizzle={this.props.drizzle}\r\n              drizzleState={this.props.drizzleState}\r\n            />\r\n        </Row>\r\n        <Row className=\"mt-3\">\r\n          \r\n            <MergeResource\r\n              resourceName=\"Cherry\"\r\n              drizzle={this.props.drizzle}\r\n              drizzleState={this.props.drizzleState}\r\n            />\r\n            <MergeResource\r\n              resourceName=\"Dough\"\r\n              drizzle={this.props.drizzle}\r\n              drizzleState={this.props.drizzleState}\r\n            />\r\n        </Row>\r\n        \r\n        \r\n        </Container>\r\n      );\r\n  }\r\n}\r\n\r\nexport default GroupBasic;","import React from \"react\";\r\n\r\nimport MergeResource from \"./MergeResource\";\r\n\r\nimport { Container, Row, Col } from 'reactstrap';\r\n\r\nclass GroupLevel1 extends React.Component {\r\n  render() {\r\n      return (\r\n    <Container>\r\n        <Row className=\"mt-3 mb-3\">\r\n          <Col>\r\n            <h2>Simple Donuts and Cakes</h2>\r\n          </Col>\r\n        </Row>\r\n        \r\n        <Row>\r\n            <MergeResource\r\n              resourceName=\"Donut\"\r\n              drizzle={this.props.drizzle}\r\n              drizzleState={this.props.drizzleState}\r\n            />\r\n            <MergeResource\r\n              resourceName=\"Layercake\"\r\n              drizzle={this.props.drizzle}\r\n              drizzleState={this.props.drizzleState}\r\n            />\r\n            <MergeResource\r\n              resourceName=\"Cookies\"\r\n              drizzle={this.props.drizzle}\r\n              drizzleState={this.props.drizzleState}\r\n            />\r\n            <MergeResource\r\n              resourceName=\"Cupcakes\"\r\n              drizzle={this.props.drizzle}\r\n              drizzleState={this.props.drizzleState}\r\n            />\r\n        </Row>\r\n        \r\n        <Row>\r\n            <MergeResource\r\n              resourceName=\"Sprinkledcupcakes\"\r\n              drizzle={this.props.drizzle}\r\n              drizzleState={this.props.drizzleState}\r\n            />\r\n        </Row>\r\n        \r\n        </Container>\r\n      );\r\n  }\r\n}\r\n\r\nexport default GroupLevel1;","import React from \"react\";\r\n\r\nimport { Container, Row, Col } from 'reactstrap';\r\n\r\nclass GroupLevel1 extends React.Component {\r\n\r\n\r\n\r\n  render() {\r\n    var self = this;\r\n      return (\r\n    <Container>\r\n        <Row className=\"mt-3 mb-3\">\r\n          <Col>\r\n            <h2>Gameplay</h2>\r\n            <p>\r\n              You are the proud owner of a small tiny store. Produce different Ingredients and earn DTM Tokens (displayed top-left corner).<br />\r\n              Level Up and get more resources at the same time to produce better products which earn more DTM Tokens.\r\n              </p>\r\n\r\n            <p>\r\n              Some other facts:\r\n            </p>\r\n            <div>\r\n             <ul  className=\"list-group\">\r\n                <li className=\"list-group-item\">All Products are ERC20 Tokens! You can trade them P2P.</li>\r\n                <li className=\"list-group-item\">Because they are ERC20 Tokens you can add them to MetaMask or to your wallet of choice.</li>\r\n                <li className=\"list-group-item\">You can also verify the Tokens on etherscan.io or trade them via myetherwallet.com.</li>\r\n                <li className=\"list-group-item\">All Tokens have 0 Decimals</li>\r\n                <li className=\"list-group-item\">The \"GameCurrency\" Token is the one really important one: {self.props.drizzle.contracts[\"GameCurrency\"].address}</li>\r\n                <li className=\"list-group-item\">Some tokens are harder to produce than others</li>\r\n                <li className=\"list-group-item\">Some tokens have a limited world-amount. Meaning you are playing against other players to get these items.</li>\r\n                <li className=\"list-group-item\">Good luck!</li>\r\n                </ul>\r\n              </div>\r\n          </Col>\r\n        </Row>\r\n        \r\n        \r\n            {Object.keys(this.props.drizzle.contracts).map(function(name, index){\r\n                    return <p key={index}><em>{name}</em>: {self.props.drizzle.contracts[name].address}</p>\r\n                  })\r\n                }\r\n        \r\n        </Container>\r\n      );\r\n  }\r\n}\r\n\r\nexport default GroupLevel1;","import React from \"react\";\r\n\r\nimport MergeResource from \"./MergeResource\";\r\n\r\nimport { Container, Row, Col } from 'reactstrap';\r\n\r\nclass GroupDeko extends React.Component {\r\n  render() {\r\n      return (\r\n    <Container>\r\n        <Row className=\"mt-3 mb-3\">\r\n          <Col>\r\n            <h2>Decorations and Ingredients</h2>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n            <MergeResource\r\n              resourceName=\"Sprinkle\"\r\n              drizzle={this.props.drizzle}\r\n              drizzleState={this.props.drizzleState}\r\n            />\r\n        </Row>\r\n        \r\n        \r\n        </Container>\r\n      );\r\n  }\r\n}\r\n\r\nexport default GroupDeko;","import React, {\n  Component\n} from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport NavBar from \"./NavBar\";\nimport GroupBasic from \"./GroupBasic\";\nimport GroupLevel1 from \"./GroupLevel1\";\nimport GroupOverview from \"./GroupOverview\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport GroupDeko from './GroupDeko';\n\nimport { DrizzleContext } from \"drizzle-react\";\n\n\n\nclass App extends Component {\n\n  \n  render() {\n     \n    return (\n      \n      <Router  basename='/dolcetokens'>\n      <DrizzleContext.Consumer>\n    {drizzleContext => {\n      const { drizzle, drizzleState, initialized } = drizzleContext;\n  \n      if (!initialized) {\n        return \"Loading Dolce Token Mania...\";\n      }\n\n      return (\n        <div className=\"App\">\n        <NavBar drizzle={drizzle} drizzleState={drizzleState} resourceName=\"GameCurrency\"  />\n        \n          <div>\n        <Route path=\"/\" exact render={(props) => <GroupBasic {...props} drizzle={drizzle} drizzleState={drizzleState} /> } />\n        <Route path=\"/simple\" render={(props) => <GroupLevel1 {...props}  drizzle={drizzle} drizzleState={drizzleState} /> }  />\n        <Route path=\"/decoration\" render={(props) => <GroupDeko {...props}   drizzle={drizzle}  drizzleState={drizzleState} />}  />\n        <Route path=\"/help\" render={(props) => <GroupOverview {...props}   drizzle={drizzle}  drizzleState={drizzleState} />}  />\n        </div>\n        </div>\n        \n      );\n    }}\n  </DrizzleContext.Consumer>\n     \n  </Router>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// import drizzle functions and contract artifact\nimport {\n    Drizzle,\n    generateStore\n} from \"drizzle\";\n\nimport { DrizzleContext } from \"drizzle-react\";\nimport Flour from \"./contracts/Flour.json\";\nimport Eggs from \"./contracts/Eggs.json\";\nimport Milk from \"./contracts/Milk.json\";\nimport Dough from \"./contracts/Dough.json\";\nimport Sugar from \"./contracts/Sugar.json\";\nimport Cookies from \"./contracts/Cookies.json\";\nimport Donut from \"./contracts/Donut.json\";\nimport Layercake from \"./contracts/Layercake.json\";\nimport Sprinkle from \"./contracts/Sprinkle.json\";\nimport Sprinkledcupcakes from \"./contracts/Sprinkledcupcakes.json\";\nimport Cherry from \"./contracts/Cherry.json\";\nimport GameCurrency from \"./contracts/GameCurrency.json\";\nimport Cupcakes from \"./contracts/Cupcakes.json\";\n\n// let drizzle know what contracts we want\nconst options = {\n    contracts: [Flour, Eggs, Milk, Dough, Sugar,Cherry, Cookies, Donut, Layercake, Sprinkle, Sprinkledcupcakes, GameCurrency, Cupcakes],\n    syncAlways: true,\n    polls: { blocks: 10000 }\n};\n\n// setup the drizzle store and drizzle\nconst drizzleStore = generateStore(options);\nconst drizzle = new Drizzle(options, drizzleStore);\n\n// pass in the drizzle instance\nReactDOM.render(  <DrizzleContext.Provider drizzle={drizzle}><App /></DrizzleContext.Provider>, document.getElementById(\"root\"));\n        //registerServiceWorker();\n\n        // If you want your app to work offline and load faster, you can change\n        // unregister() to register() below. Note this comes with some pitfalls.\n        // Learn more about service workers: http://bit.ly/CRA-PWA\n        serviceWorker.unregister();"],"sourceRoot":""}